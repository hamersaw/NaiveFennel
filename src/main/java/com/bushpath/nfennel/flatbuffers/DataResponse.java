// automatically generated by the FlatBuffers compiler, do not modify

package com.bushpath.nfennel.flatbuffers;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class DataResponse extends Table {
  public static DataResponse getRootAsDataResponse(ByteBuffer _bb) { return getRootAsDataResponse(_bb, new DataResponse()); }
  public static DataResponse getRootAsDataResponse(ByteBuffer _bb, DataResponse obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public DataResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte data(int j) { int o = __offset(4); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int dataLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer dataAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer dataInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }

  public static int createDataResponse(FlatBufferBuilder builder,
      int dataOffset) {
    builder.startObject(1);
    DataResponse.addData(builder, dataOffset);
    return DataResponse.endDataResponse(builder);
  }

  public static void startDataResponse(FlatBufferBuilder builder) { builder.startObject(1); }
  public static void addData(FlatBufferBuilder builder, int dataOffset) { builder.addOffset(0, dataOffset, 0); }
  public static int createDataVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startDataVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endDataResponse(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

